name: Build

on:
  push:
    paths:
      - '**'
      - '!README.md'
      - '!LICENSE.txt'
      - '!docs/**'

env:
  FEED_URL: "https://nuget.pkg.github.com/stripe2933/index.json"
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/stripe2933/index.json,readwrite"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: 'windows-latest', compiler: 'msvc' }
          - { os: 'windows-latest', compiler: 'mingw-clang' }
          - { os: 'macos-15', compiler: 'clang' }
          - { os: 'ubuntu-latest', compiler: 'clang' }
          - { os: 'ubuntu-24.04-arm', compiler: 'clang' }

    steps:
      - uses: actions/checkout@v4

      - name: Install Vulkan SDK
        uses: stripe2933/setup-vulkan-sdk@30a1c4f5464781f4559063b11e19b080a53b4411
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang, SPIRV-Tools
          vulkan-use-cache: true

      - name: Install MinGW Clang (Windows + MinGW Clang)
        if: ${{ runner.os == 'Windows' && matrix.compiler == 'mingw-clang' }}
        run: C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -S mingw-w64-clang-x86_64-clang mingw-w64-clang-x86_64-libc++ mingw-w64-clang-x86_64-libwinpthread-git'

      - name: Install build dependencies (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install llvm mono autoconf automake libtool nasm molten-vk

      - name: Install build dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install libc++-dev libc++abi-dev mono-devel xorg-dev libtool libltdl-dev

      - name: Enable Developer Command Prompt (Windows + MSVC)
        if: ${{ runner.os == 'Windows' && matrix.compiler == 'msvc' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Workaround for CMake bug that cannot find __CMAKE::CXX23 target when using homebrew libc++ (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: sed -i '' 's|libc++.modules.json|../../c++/libc++.modules.json|g' /opt/homebrew/opt/cmake/share/cmake/Modules/Compiler/Clang-CXX-CXXImportStd.cmake # https://gitlab.kitware.com/cmake/cmake/-/issues/25965#note_1523575

      - name: Add NuGet sources (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          .$(vcpkg fetch nuget) sources add -Source "${{ env.FEED_URL }}" -Name GitHubPackages -UserName "stripe2933" -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          .$(vcpkg fetch nuget) setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" -Source "${{ env.FEED_URL }}"

      - name: Add NuGet sources (macOS, Linux)
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        shell: bash
        run: |
          mono `vcpkg fetch nuget | tail -n 1` sources add -Source "${{ env.FEED_URL }}" -Name GitHubPackages -UserName "stripe2933" -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          mono `vcpkg fetch nuget | tail -n 1` setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" -Source "${{ env.FEED_URL }}"

      - name: Configure
        run: |
          vcpkg add port cgal ktx openexr
          mv .github/workflows/scripts/* .
          cmake --preset=${{ matrix.os }}-${{ matrix.compiler }}

      - name: Build
        run: cmake --build build --config release

      - name: Upload Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}_${{ runner.arch }}_${{ matrix.compiler }}
          path: |
            build/vk-gltf-viewer.exe
            build/vk-gltf-viewer.app
            build/vk-gltf-viewer
            build/*.dll