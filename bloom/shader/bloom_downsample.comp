#version 450
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
#extension GL_AMD_shader_image_load_store_lod : enable
#else
#extension GL_EXT_nonuniform_qualifier : require
#endif

layout (set = 0, binding = 0) uniform sampler2D inputSampler;
layout (set = 0, binding = 1) uniform writeonly image2D outputImages[];

layout (local_size_x = 16, local_size_y = 16) in;

layout (push_constant, std430) uniform PushConstants {
    int srcMipLevel;
    int dstMipLevel;
} pc;

void main(){
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
    ivec2 outputImageSize = max(imageSize(outputImages[0]) >> pc.dstMipLevel, ivec2(1));
#else
    ivec2 outputImageSize = imageSize(outputImages[pc.dstMipLevel]);
#endif
    if (gl_GlobalInvocationID.x >= outputImageSize.x || gl_GlobalInvocationID.y >= outputImageSize.y) {
        return;
    }

    vec2 texcoord = (gl_GlobalInvocationID.xy + 0.5) / vec2(outputImageSize);
    vec2 inputTexelSize = 1.0 / textureSize(inputSampler, pc.srcMipLevel);

    // Take 13 samples around current texel:
    // a - b - c
    // - j - k -
    // d - e - f
    // - l - m -
    // g - h - i
    // === ('e' is the current texel) ===
    vec4 a = textureLod(inputSampler, texcoord + vec2(-2,  2) * inputTexelSize, pc.srcMipLevel);
    vec4 b = textureLod(inputSampler, texcoord + vec2( 0,  2) * inputTexelSize, pc.srcMipLevel);
    vec4 c = textureLod(inputSampler, texcoord + vec2( 2,  2) * inputTexelSize, pc.srcMipLevel);

    vec4 d = textureLod(inputSampler, texcoord + vec2(-2,  0) * inputTexelSize, pc.srcMipLevel);
    vec4 e = textureLod(inputSampler, texcoord + vec2( 0,  0) * inputTexelSize, pc.srcMipLevel);
    vec4 f = textureLod(inputSampler, texcoord + vec2( 2,  0) * inputTexelSize, pc.srcMipLevel);

    vec4 g = textureLod(inputSampler, texcoord + vec2(-2, -2) * inputTexelSize, pc.srcMipLevel);
    vec4 h = textureLod(inputSampler, texcoord + vec2( 0, -2) * inputTexelSize, pc.srcMipLevel);
    vec4 i = textureLod(inputSampler, texcoord + vec2( 2, -2) * inputTexelSize, pc.srcMipLevel);

    vec4 j = textureLod(inputSampler, texcoord + vec2(-1,  1) * inputTexelSize, pc.srcMipLevel);
    vec4 k = textureLod(inputSampler, texcoord + vec2( 1,  1) * inputTexelSize, pc.srcMipLevel);
    vec4 l = textureLod(inputSampler, texcoord + vec2(-1, -1) * inputTexelSize, pc.srcMipLevel);
    vec4 m = textureLod(inputSampler, texcoord + vec2( 1, -1) * inputTexelSize, pc.srcMipLevel);

    // Apply weighted distribution:
    // 0.5 + 0.125 + 0.125 + 0.125 + 0.125 = 1
    // a,b,d,e * 0.125
    // b,c,e,f * 0.125
    // d,e,g,h * 0.125
    // e,f,h,i * 0.125
    // j,k,l,m * 0.5
    // This shows 5 square areas that are being sampled. But some of them overlap,
    // so to have an energy preserving downsample we need to make some adjustments.
    // The weights are the distributed, so that the sum of j,k,l,m (e.g.)
    // contribute 0.5 to the final color output. The code below is written
    // to effectively yield this sum. We get:
    // 0.125*5 + 0.03125*4 + 0.0625*4 = 1
    vec4 downsample = e * 0.125 + (a + c + g + i) * 0.03125 + (b + d + f + h) * 0.0625 + (j + k + l + m) * 0.125;
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
    imageStoreLodAMD(outputImages[0], ivec2(gl_GlobalInvocationID.xy), pc.dstMipLevel, downsample);
#else
    imageStore(outputImages[pc.dstMipLevel], ivec2(gl_GlobalInvocationID.xy), downsample);
#endif
}