#version 450
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
#extension GL_AMD_shader_image_load_store_lod : enable
#else
#extension GL_EXT_nonuniform_qualifier : require
#endif

layout (set = 0, binding = 0) uniform sampler2DArray inputSampler;
layout (set = 0, binding = 1) uniform writeonly image2DArray outputImages[];

layout (local_size_x = 16, local_size_y = 16) in;

layout (push_constant, std430) uniform PushConstants {
    int srcMipLevel;
    int dstMipLevel;
} pc;

void main(){
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
    ivec2 outputImageSize = imageSize(outputImages[0]).xy;
    outputImageSize = max(outputImageSize >> pc.dstMipLevel, ivec2(1));
#else
    ivec2 outputImageSize = imageSize(outputImages[pc.dstMipLevel]).xy;
#endif
    if (gl_GlobalInvocationID.x >= outputImageSize.x || gl_GlobalInvocationID.y >= outputImageSize.y) {
        return;
    }

    vec3 texcoord = vec3((gl_GlobalInvocationID.xy + 0.5) / vec2(outputImageSize), gl_GlobalInvocationID.z);

    // Take 9 samples around current texel:
    // a - b - c
    // d - e - f
    // g - h - i
    // === ('e' is the current texel) ===
    vec4 a = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2(-1,  1));
    vec4 b = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2( 0,  1));
    vec4 c = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2( 1,  1));

    vec4 d = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2(-1,  0));
    vec4 e = textureLod(inputSampler, texcoord, pc.srcMipLevel);
    vec4 f = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2( 1,  0));

    vec4 g = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2(-1, -1));
    vec4 h = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2( 0, -1));
    vec4 i = textureLodOffset(inputSampler, texcoord, pc.srcMipLevel, ivec2( 1, -1));

    // Apply weighted distribution, by using a 3x3 tent filter:
    //  1   | 1 2 1 |
    // -- * | 2 4 2 |
    // 16   | 1 2 1 |
    vec4 upsample = texelFetch(inputSampler, ivec3(gl_GlobalInvocationID), pc.dstMipLevel) + (e * 4.0 + (b + d + f + h) * 2.0 + (a + c + g + i)) / 16.0;
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
    imageStoreLodAMD(outputImages[0], ivec3(gl_GlobalInvocationID), pc.dstMipLevel, upsample);
#else
    imageStore(outputImages[pc.dstMipLevel], ivec3(gl_GlobalInvocationID), upsample);
#endif
}