#version 450
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_shuffle : require
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
#extension GL_AMD_shader_image_load_store_lod : enable
#endif

layout (constant_id = 0) const uint SUBGROUP_SIZE = 32;

layout (set = 0, binding = 0) uniform sampler2DArray inputTexture;
layout (set = 0, binding = 1) writeonly uniform imageCube mipImages[];

layout (push_constant, std430) uniform PushConstant {
    int baseLevel;
    uint remainingMipLevels;
} pc;

layout (local_size_x = 16, local_size_y = 16) in;

shared vec4 sharedData[256 / SUBGROUP_SIZE];

void imageStoreWithLod(ivec3 coordinate, int lod, vec4 color) {
#if AMD_SHADER_IMAGE_LOAD_STORE_LOD == 1
    imageStoreLodAMD(mipImages[0], coordinate, lod, color);
#else
    imageStore(mipImages[lod], coordinate, color);
#endif
}

void main(){
    if (SUBGROUP_SIZE == 16) {
        ivec2 firstMipStoreCoordinate = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + uvec2(
            (gl_LocalInvocationID.x & 3U) | (gl_LocalInvocationID.y & ~3U),
            ((gl_LocalInvocationID.y << 2U) | (gl_LocalInvocationID.x >> 2U)) & 15U
        ));
        vec2 sampleCoordinate = (2 * vec2(firstMipStoreCoordinate) + 1) / textureSize(inputTexture, pc.baseLevel).xy;

        vec4 averageColor = textureLod(inputTexture, vec3(sampleCoordinate, gl_GlobalInvocationID.z), pc.baseLevel);
        imageStoreWithLod(ivec3(firstMipStoreCoordinate, gl_GlobalInvocationID.z), pc.baseLevel + 1, averageColor);
        if (pc.remainingMipLevels == 1U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 1U /* 0b0001 */);
        averageColor += subgroupShuffleXor(averageColor, 4U /* 0b0100 */);
        averageColor /= 4.f;
        if ((gl_SubgroupInvocationID & 5U /* 0b101 */) == 5U) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 1, gl_GlobalInvocationID.z), pc.baseLevel + 2, averageColor);
        }
        if (pc.remainingMipLevels == 2U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 2U /* 0b0010 */);
        averageColor += subgroupShuffleXor(averageColor, 8U /* 0b1000 */);
        averageColor /= 4.f;

        if ((gl_SubgroupInvocationID & 15U /* 0b1111 */) == 15U) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 2, gl_GlobalInvocationID.z), pc.baseLevel + 3, averageColor);
        }
        if (pc.remainingMipLevels == 3U){
            return;
        }

        if (subgroupElect()){
            sharedData[gl_SubgroupID] = averageColor;
        }

        memoryBarrierShared();
        barrier();

        if ((gl_SubgroupID & 5U) == 5U){
            averageColor = (sharedData[gl_SubgroupID] + sharedData[gl_SubgroupID ^ 1U] + sharedData[gl_SubgroupID ^ 4U] + sharedData[gl_SubgroupID ^ 5U]) / 4.f;
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 3, gl_GlobalInvocationID.z), pc.baseLevel + 4, averageColor);
        }
        if (pc.remainingMipLevels == 4U){
            return;
        }

        if (gl_LocalInvocationIndex == 0U){
            averageColor = (sharedData[0] + sharedData[1] + sharedData[2] + sharedData[3] + sharedData[4] + sharedData[5] + sharedData[6] + sharedData[7] + sharedData[8] + sharedData[9] + sharedData[10] + sharedData[11] + sharedData[12] + sharedData[13] + sharedData[14] + sharedData[15]) / 16.f;
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 4, gl_GlobalInvocationID.z), pc.baseLevel + 5, averageColor);
        }
    }
    else if (SUBGROUP_SIZE == 32) {
        ivec2 firstMipStoreCoordinate = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + uvec2(
            (gl_LocalInvocationID.x & 7U) | (gl_LocalInvocationID.y & ~7U),
            ((gl_LocalInvocationID.y << 1U) | (gl_LocalInvocationID.x >> 3U)) & 15U
        ));
        vec2 sampleCoordinate = (2 * vec2(firstMipStoreCoordinate) + 1) / textureSize(inputTexture, pc.baseLevel).xy;

        vec4 averageColor = textureLod(inputTexture, vec3(sampleCoordinate, gl_GlobalInvocationID.z), pc.baseLevel);
        imageStoreWithLod(ivec3(firstMipStoreCoordinate, gl_GlobalInvocationID.z), pc.baseLevel + 1, averageColor);
        if (pc.remainingMipLevels == 1U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 1U /* 0b0001 */);
        averageColor += subgroupShuffleXor(averageColor, 8U /* 0b1000 */);
        averageColor /= 4.f;
        if ((gl_SubgroupInvocationID & 9U /* 0b1001 */) == 9U) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 1, gl_GlobalInvocationID.z), pc.baseLevel + 2, averageColor);
        }
        if (pc.remainingMipLevels == 2U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 2U /* 0b00010 */);
        averageColor += subgroupShuffleXor(averageColor, 16U /* 0b10000 */);
        averageColor /= 4.f;

        if ((gl_SubgroupInvocationID & 27U /* 0b11011 */) == 27U) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 2, gl_GlobalInvocationID.z), pc.baseLevel + 3, averageColor);
        }
        if (pc.remainingMipLevels == 3U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 4U /* 0b00100 */);
        if (subgroupElect()){
            sharedData[gl_SubgroupID] = averageColor;
        }

        memoryBarrierShared();
        barrier();

        if ((gl_SubgroupID & 1U) == 1U){
            averageColor = (sharedData[gl_SubgroupID] + sharedData[gl_SubgroupID ^ 1U]) / 4.f;
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 3, gl_GlobalInvocationID.z), pc.baseLevel + 4, averageColor);
        }
        if (pc.remainingMipLevels == 4U){
            return;
        }

        if (gl_LocalInvocationIndex == 0U){
            averageColor = (sharedData[0] + sharedData[1] + sharedData[2] + sharedData[3] + sharedData[4] + sharedData[5] + sharedData[6] + sharedData[7]) / 16.f;
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 4, gl_GlobalInvocationID.z), pc.baseLevel + 5, averageColor);
        }
    }
    else if (SUBGROUP_SIZE == 64) {
        ivec2 firstMipStoreCoordinate = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + uvec2(
            (gl_LocalInvocationID.x & 7U) | (gl_LocalInvocationID.y & ~7U),
            ((gl_LocalInvocationID.y << 1U) | (gl_LocalInvocationID.x >> 3U)) & 15U
        ));
        vec2 sampleCoordinate = (2 * vec2(firstMipStoreCoordinate) + 1) / textureSize(inputTexture, pc.baseLevel).xy;

        vec4 averageColor = textureLod(inputTexture, vec3(sampleCoordinate, gl_GlobalInvocationID.z), pc.baseLevel);
        imageStoreWithLod(ivec3(firstMipStoreCoordinate, gl_GlobalInvocationID.z), pc.baseLevel + 1, averageColor);
        if (pc.remainingMipLevels == 1U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 1U /* 0b0001 */);
        averageColor += subgroupShuffleXor(averageColor, 8U /* 0b1000 */);
        averageColor /= 4.f;
        if ((gl_SubgroupInvocationID & 9U /* 0b1001 */) == 9U) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 1, gl_GlobalInvocationID.z), pc.baseLevel + 2, averageColor);
        }
        if (pc.remainingMipLevels == 2U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 2U /* 0b00010 */);
        averageColor += subgroupShuffleXor(averageColor, 16U /* 0b10000 */);
        averageColor /= 4.f;

        if ((gl_SubgroupInvocationID & 27U /* 0b11011 */) == 27U) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 2, gl_GlobalInvocationID.z), pc.baseLevel + 3, averageColor);
        }
        if (pc.remainingMipLevels == 3U){
            return;
        }

        averageColor += subgroupShuffleXor(averageColor, 4U /* 0b00100 */);
        averageColor += subgroupShuffleXor(averageColor, 32U /* 0b100000 */);
        averageColor /= 4.f;

        if (subgroupElect()) {
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 3, gl_GlobalInvocationID.z), pc.baseLevel + 4, averageColor);
        }
        if (pc.remainingMipLevels == 4U){
            return;
        }

        sharedData[gl_SubgroupID] = averageColor;

        memoryBarrierShared();
        barrier();

        if (gl_LocalInvocationIndex == 0U){
            averageColor = (sharedData[0] + sharedData[1] + sharedData[2] + sharedData[3]) / 4.f;
            imageStoreWithLod(ivec3(firstMipStoreCoordinate >> 4, gl_GlobalInvocationID.z), pc.baseLevel + 5, averageColor);
        }
    }
}