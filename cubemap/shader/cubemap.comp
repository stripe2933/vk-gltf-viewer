#version 450

const vec2 INV_ATAN = vec2(0.1591, 0.3183);

layout (set = 0, binding = 0) uniform sampler2D eqmapSampler;
layout (set = 0, binding = 1) writeonly uniform imageCube cubemapImage;

layout (local_size_x = 16, local_size_y = 16) in;

// --------------------
// Functions.
// --------------------

vec3 getWorldDirection(uvec3 coord, uint imageSize){
    vec2 texcoord = 2.0 * vec2(coord.xy) / imageSize - 1.0;
    switch (coord.z){
        case 0U: return normalize(vec3(1.0, texcoord.y, -texcoord.x));
        case 1U: return normalize(vec3(-1.0, texcoord.yx));
        case 2U: return normalize(vec3(texcoord.x, -1.0, texcoord.y));
        case 3U: return normalize(vec3(texcoord.x, 1.0, -texcoord.y));
        case 4U: return normalize(vec3(texcoord, 1.0));
        case 5U: return normalize(vec3(-texcoord.x, texcoord.y, -1.0));
    }
    return vec3(0.0); // unreachable.
}

vec2 sampleSphericalMap(vec3 v){
    return INV_ATAN * vec2(atan(v.z, v.x), asin(v.y)) + 0.5;
}

void main(){
    // Load color from equirectangular map image.
    vec2 uv = sampleSphericalMap(getWorldDirection(gl_GlobalInvocationID, imageSize(cubemapImage).x));
    vec4 color = textureLod(eqmapSampler, uv, 0.0);

    // Store color into cubemapImage.
    imageStore(cubemapImage, ivec3(gl_GlobalInvocationID), color);
}